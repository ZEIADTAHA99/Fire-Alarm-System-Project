
Fire Alarm_Recieve.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000186  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080e  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000655  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fd  00000000  00000000  0000110b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001508  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b2  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000250  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  64:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <motor>:
	while(readbit(UCSRA,UDRE)==0)// wait the reg to be empty
	{		}
	UDR = data; // send  data
	while(readbit(UCSRA,TXC)==0)// wait till the data to be send
	{		}
}
  6c:	9a b3       	in	r25, 0x1a	; 26
  6e:	91 60       	ori	r25, 0x01	; 1
  70:	9a bb       	out	0x1a, r25	; 26
  72:	9a b3       	in	r25, 0x1a	; 26
  74:	92 60       	ori	r25, 0x02	; 2
  76:	9a bb       	out	0x1a, r25	; 26
  78:	66 23       	and	r22, r22
  7a:	21 f0       	breq	.+8      	; 0x84 <motor+0x18>
  7c:	9b b3       	in	r25, 0x1b	; 27
  7e:	91 60       	ori	r25, 0x01	; 1
  80:	9b bb       	out	0x1b, r25	; 27
  82:	03 c0       	rjmp	.+6      	; 0x8a <motor+0x1e>
  84:	9b b3       	in	r25, 0x1b	; 27
  86:	92 60       	ori	r25, 0x02	; 2
  88:	9b bb       	out	0x1b, r25	; 27
  8a:	99 e6       	ldi	r25, 0x69	; 105
  8c:	93 bf       	out	0x33, r25	; 51
  8e:	97 b3       	in	r25, 0x17	; 23
  90:	98 60       	ori	r25, 0x08	; 8
  92:	97 bb       	out	0x17, r25	; 23
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	82 9f       	mul	r24, r18
  98:	c0 01       	movw	r24, r0
  9a:	11 24       	eor	r1, r1
  9c:	64 e6       	ldi	r22, 0x64	; 100
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	0e 94 99 00 	call	0x132	; 0x132 <__divmodhi4>
  a4:	6c bf       	out	0x3c, r22	; 60
  a6:	08 95       	ret

000000a8 <UART_INIT>:
  a8:	2a b1       	in	r18, 0x0a	; 10
  aa:	28 61       	ori	r18, 0x18	; 24
  ac:	2a b9       	out	0x0a, r18	; 10
  ae:	20 b5       	in	r18, 0x20	; 32
  b0:	26 68       	ori	r18, 0x86	; 134
  b2:	20 bd       	out	0x20, r18	; 32
  b4:	89 b9       	out	0x09, r24	; 9
  b6:	90 bd       	out	0x20, r25	; 32
  b8:	08 95       	ret

000000ba <UART_receivechar>:

unsigned char UART_receivechar()
{
	while(readbit(UCSRA,RXC)==0) // wait the data to be receive
  ba:	5f 9b       	sbis	0x0b, 7	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <UART_receivechar>
	{	;	}
	
	return UDR;// data source for variables
  be:	8c b1       	in	r24, 0x0c	; 12
}
  c0:	08 95       	ret

000000c2 <main>:



int main(void)
{
	UART_INIT(103);
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 54 00 	call	0xa8	; 0xa8 <UART_INIT>
	unsigned char x;
	
	
	setbit(DDRC,6); // Alarm RED LED
  ca:	84 b3       	in	r24, 0x14	; 20
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	84 bb       	out	0x14, r24	; 20
	setbit(DDRC,5); // Green LED
  d0:	84 b3       	in	r24, 0x14	; 20
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	84 bb       	out	0x14, r24	; 20
	
	while (1)
	{
	    x = UART_receivechar();
  d6:	0e 94 5d 00 	call	0xba	; 0xba <UART_receivechar>
		//UART_sendchar(x);

	
		if (x == 'f')
  da:	86 36       	cpi	r24, 0x66	; 102
  dc:	09 f5       	brne	.+66     	; 0x120 <main+0x5e>
		{
			setbit(PORTC,6);  // Alarm RED LED (On)
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	85 bb       	out	0x15, r24	; 21
			clearbit(PORTC,5);  // Green LED   (off)
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	8f 7d       	andi	r24, 0xDF	; 223
  e8:	85 bb       	out	0x15, r24	; 21
			
			motor(100,1);  // Let Motor Turn Right (1: IN1) With Full Speed (Indication of DC motor Connected with Window, T0 open it in Alarm Mode)
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	84 e6       	ldi	r24, 0x64	; 100
  ee:	0e 94 36 00 	call	0x6c	; 0x6c <motor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	89 e6       	ldi	r24, 0x69	; 105
  f6:	98 e1       	ldi	r25, 0x18	; 24
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x36>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x40>
 102:	00 00       	nop
			_delay_ms(500);
			motor(0,0);    // Motor Stop
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 36 00 	call	0x6c	; 0x6c <motor>
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	89 e6       	ldi	r24, 0x69	; 105
 110:	98 e1       	ldi	r25, 0x18	; 24
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x50>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x5a>
 11c:	00 00       	nop
 11e:	db cf       	rjmp	.-74     	; 0xd6 <main+0x14>
			_delay_ms(500);
			
		}
		
		else if (x == 'n')
 120:	8e 36       	cpi	r24, 0x6E	; 110
 122:	c9 f6       	brne	.-78     	; 0xd6 <main+0x14>
		{
			
			setbit(PORTC,5);  // Green LED
 124:	85 b3       	in	r24, 0x15	; 21
 126:	80 62       	ori	r24, 0x20	; 32
 128:	85 bb       	out	0x15, r24	; 21
			clearbit(PORTC,6);  // Alarm RED LED
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	8f 7b       	andi	r24, 0xBF	; 191
 12e:	85 bb       	out	0x15, r24	; 21
 130:	d2 cf       	rjmp	.-92     	; 0xd6 <main+0x14>

00000132 <__divmodhi4>:
 132:	97 fb       	bst	r25, 7
 134:	07 2e       	mov	r0, r23
 136:	16 f4       	brtc	.+4      	; 0x13c <__divmodhi4+0xa>
 138:	00 94       	com	r0
 13a:	07 d0       	rcall	.+14     	; 0x14a <__divmodhi4_neg1>
 13c:	77 fd       	sbrc	r23, 7
 13e:	09 d0       	rcall	.+18     	; 0x152 <__divmodhi4_neg2>
 140:	0e 94 ad 00 	call	0x15a	; 0x15a <__udivmodhi4>
 144:	07 fc       	sbrc	r0, 7
 146:	05 d0       	rcall	.+10     	; 0x152 <__divmodhi4_neg2>
 148:	3e f4       	brtc	.+14     	; 0x158 <__divmodhi4_exit>

0000014a <__divmodhi4_neg1>:
 14a:	90 95       	com	r25
 14c:	81 95       	neg	r24
 14e:	9f 4f       	sbci	r25, 0xFF	; 255
 150:	08 95       	ret

00000152 <__divmodhi4_neg2>:
 152:	70 95       	com	r23
 154:	61 95       	neg	r22
 156:	7f 4f       	sbci	r23, 0xFF	; 255

00000158 <__divmodhi4_exit>:
 158:	08 95       	ret

0000015a <__udivmodhi4>:
 15a:	aa 1b       	sub	r26, r26
 15c:	bb 1b       	sub	r27, r27
 15e:	51 e1       	ldi	r21, 0x11	; 17
 160:	07 c0       	rjmp	.+14     	; 0x170 <__udivmodhi4_ep>

00000162 <__udivmodhi4_loop>:
 162:	aa 1f       	adc	r26, r26
 164:	bb 1f       	adc	r27, r27
 166:	a6 17       	cp	r26, r22
 168:	b7 07       	cpc	r27, r23
 16a:	10 f0       	brcs	.+4      	; 0x170 <__udivmodhi4_ep>
 16c:	a6 1b       	sub	r26, r22
 16e:	b7 0b       	sbc	r27, r23

00000170 <__udivmodhi4_ep>:
 170:	88 1f       	adc	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	5a 95       	dec	r21
 176:	a9 f7       	brne	.-22     	; 0x162 <__udivmodhi4_loop>
 178:	80 95       	com	r24
 17a:	90 95       	com	r25
 17c:	bc 01       	movw	r22, r24
 17e:	cd 01       	movw	r24, r26
 180:	08 95       	ret

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
